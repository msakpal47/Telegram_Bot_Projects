select * from Employee  

--Write a query to select all employees with a salary greater than $10,000. 

select name, dept,salary
from Employee
where salary > 10000


---Write a query to find the average salary of employees in each department. 
select dept, name, avg(salary)
from employee
group by dept, name

select dept, avg(salary) as avg_salary
from employee
where ISNULL(dept,'') !=''
group by dept

---Write a query to find the top 3 highest-paid employees. 

select * from Employee  

select Top 3 name, dept, salary
from Employee
order by salary desc

select Top 3 name,dept, salary
from Employee
where ISNULL(dept,'') !=''
order by salary desc

---Write a query to find the highest salary by department. 

select * from Employee  

select dept, max(salary) as hightest_salary
from Employee
group by dept


select dept, max(salary) as highest_salary
from Employee
where ISNULL(dept,'') !=''
group by dept
 
 ---Write a query to find all duplicates in a table. 


 select * from Employee


 select Count(*)dept
 from Employee
 group by dept
 having COUNT(*) > 1


 select dept,name, Count(*) as duplicates
 from Employee
 GROUP BY dept,name
 HAVING count(*) > 1

SELECT dept, name, COUNT(*) AS duplicate_count
FROM Employee
GROUP BY dept, name
HAVING COUNT(*) > 1;


SELECT name, dept, salary, COUNT(*) AS duplicate_count
FROM Employee
GROUP BY name, dept, salary
HAVING COUNT(*) > 1;


------Ecommerce queries------




-- 1. Create Users table FIRST
CREATE TABLE Users (
    user_id INT PRIMARY KEY,
    name VARCHAR(50),
    email VARCHAR(100),
    registration_date DATE
);


-- Orders Table
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    user_id INT,
    item VARCHAR(50),
    amount DECIMAL(10, 2),
    order_date DATE,
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

-- Logins Table
CREATE TABLE Logins (
    login_id INT PRIMARY KEY,
    user_id INT,
    login_date DATE,
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

-- Purchases Table
CREATE TABLE Purchases (
    purchase_id INT PRIMARY KEY,
    user_id INT,
    item VARCHAR(50),
    amount DECIMAL(10, 2),
    purchase_date DATE,
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);


-- Users
INSERT INTO Users VALUES
(1, 'Alice', 'alice@example.com', '2022-01-15'),
(2, 'Bob', 'bob@example.com', '2021-11-20'),
(3, 'Charlie', 'charlie@example.com', '2022-06-10'),
(4, 'David', 'david@example.com', '2022-12-05'),
(5, 'Eve', 'eve@example.com', '2023-02-20'),
(6, 'Alice2', 'alice@example.com', '2023-03-20'); -- duplicate email

-- Orders
INSERT INTO Orders VALUES
(101, 1, 'Laptop', 1500.00, '2023-03-10'),
(102, 2, 'Phone', 800.00, '2023-03-12'),
(103, 1, 'Mouse', 20.00, '2023-04-01');

-- Logins
INSERT INTO Logins VALUES
(1, 1, '2024-04-10'),
(2, 1, '2024-05-05'),
(3, 2, '2024-03-15'),
(4, 3, '2024-05-01'),
(5, 3, '2024-05-20'),
(6, 4, '2024-04-10');

-- Purchases
INSERT INTO Purchases VALUES
(1, 1, 'Laptop', 1500.00, '2023-03-10'),
(2, 3, 'Keyboard', 45.00, '2023-03-15'),
(3, 4, 'Laptop', 1550.00, '2023-04-10'),
(4, 1, 'Mouse', 25.00, '2023-05-01'),
(5, 3, 'Mouse', 25.00, '2023-05-05');


select * from Users
select * from Orders
select * from Logins
select * from Purchases

--Task---

---Write a query to find all customers who have never placed an order. 

select u.user_id, u.name, u.email
from Users u
left join Orders o
on u.user_id = o.user_id
where o.order_id IS NULL

select u.user_id, u.name, u.email
from Users u
left join Orders O
ON U.user_id = o.user_id
WHERE o.user_id IS NULL


---Write a query to find the number of reactivated users (users who did not log in the previous month but did log in the current month). 



---------Write a query to find the third transaction of every user. 

select User_id,purchase_id,Items,amount,purchase_date
from (select *,ROW_NUMBER() over(partition by user_id order by purchase_date) as Rn
from Purchases) as number
where rn = 3


SELECT user_id, purchase_id, amount, purchase_date
FROM (
  SELECT *, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY purchase_date) AS rn
  FROM Purchases
) AS numbered
WHERE rn = 3;

SELECT user_id, purchase_id, amount, purchase_date, rn
FROM (
  SELECT *, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY purchase_date) AS rn
  FROM Purchases
) AS numbered
WHERE rn <= 3;

SELECT user_id, purchase_id, item, amount, purchase_date
FROM (
  SELECT *, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY purchase_date) AS rn
  FROM Purchases
) AS numbered
WHERE rn = 3;


--find scound hightest salaruy from employee table 

select * from Employee 
order by salary desc

select distinct dept from Employee

select name, dept, max(salary) as Highest_salary
from employee
where isnull (dept,'') != ''
group by name, dept
order by Highest_salary desc





select name, salary as [Highest salary] from Employee where salary = (select MAX(salary) from Employee where salary < (select MAX(salary) from Employee))

-----find third hightest salaruy from employee table 

select name, salary from Employee where salary = (select MAX(salary) from Employee where salary < (Select MAX(salary) from Employee where salary < (select MAX(salary) from Employee)))

-----find forth hightest salaruy from employee table 

select name, salary, dept as [Highest salary] from Employee where salary = (select max(salary) from Employee where salary < (select MAX(salary) from Employee where salary <(select MAX(salary) from Employee where salary < (select max(salary) from Employee))))

with salaryrank as(select name,salary,dept, dense_rank() over(order by salary desc) as rank from employee where dept is not null) select name,salary,dept from salaryrank where RANK = 4

---------find fifth hightest salaruy from employee table 

with salaryrank as (select name,dept,salary, dense_rank() over(order by salary desc) as rank from employee where salary is not null)
select name, dept,salary
from salaryrank
where rank = 5


with salaryrank2 as (select name,dept,salary,dense_rank() over(order by salary desc) as rank from Employee where dept is not null)
select name,dept,salary
from salaryrank2
where RANK = 6

======select datediff.

select * from Employee

select distinct dept from Employee where dept is not null

SELECT DISTINCT dept FROM Employee WHERE dept IS NOT NULL;


select datediff (date) from Employee


---fetch duplicates records from the tables

select * from Employee

select * from Employee


select name, salary, dept, count(*) as dupicate_values
from Employee
where isnull (dept,'') != '' 
group by name, salary,dept
having count(*) >1


SELECT name, salary, dept, COUNT(*) AS record_count
FROM Employee
WHERE dept IS NOT NULL
GROUP BY name, salary, dept
HAVING COUNT(*) > 1;

---delete duplicates records from the table 

select * from Employee

begin transaction 

with CTE as (select *, ROW_NUMBER() over(partition by name,dept,salary order by (select null)) as rn from employee)

delete from CTE
where rn > 1

Rollback

---fetch common records from the both table

select * from Users
select * from Orders
select * from Logins
select * from Purchases

select u.user_id,u.name,u.email
from Users u
left join Orders o
on u.user_id = o.user_id

----Users who have placed orders and logged in:

select u.user_id, u.name, u.email
from Users u
left join Orders o
on u.user_id = o.user_id
left join Logins l
on l.user_id = o.user_id

-----------Users who have made orders, logged in, and made purchases

select u.user_id, u.name, u.email
from Users u
left join Orders o
on u.user_id = o.user_id
left join Logins l
on u.user_id= l.user_id
left join Purchases p
on u.user_id = p.user_id

------Using INTERSECT to get common user_ids:
select user_id from Users
INTERSECT
select user_id from Orders
INTERSECT
--select user_id from Logins
--INTERSECT
select user_id from Purchases

---write an sql query to display both fiest name and last name toghethger concate

select First_name+ '    ' +last_name from Employee

--- sql query to create an empty tablewith the same stucture as another  table

select Top 4*
into Employee_details
from Employee

select * from Employee_details

drop table Employee_details

----fetch unique records of departments from employee table

select distinct dept from Employee
where dept is not null

----fetch unique records of employee whose salary lies between 25000 to 50000

select * from Employee

select DISTINCT * from Employee
where salary between 25000 AND 50000

--QUERY TO FETCH COUNBT OF EMPLOYEES WORKING IN DEPARTMENT'hr'

SELECT * FROM Employee

select COUNT(*) as [total count]
from Employee
where dept = 'Hr'

select name,dept,salary, COUNT(*) as Total_count
from Employee
where dept = 'Hr'
group by name, dept,salary


--fetch query to fetch employee details ahving highest saalry/ scount hightest salary 

select name, max(salary) as [highest salary]
from Employee
Where dept is not null
group by name,dept

select Top 2 name, dept,salary
from Employee
where dept is not null
order by salary desc

with salaryrank as (select name,dept,salary,DENSE_RANK() over(order by salary desc) as rank from Employee where dept is not null)
select name, dept,salary
from salaryrank
where RANK = 2

select name,dept,salary
from Employee
where salary = (select MAX(salary)  from Employee where dept is not null)

---- query to create new table emptemp copy the structure and data of existing table employee

select top 10*
into emptemp
from Employee

select * from emptemp